"use strict";
;
function formatDate(date) {
    var ret = date.getFullYear().toString() + ("00" + (date.getMonth() + 1).toString()).slice(-2) + ("00" + (date.getDate()).toString()).slice(-2);
    return ret;
}
function formatTime(date) {
    var ret = ("00" + date.getHours().toString()).slice(-2) + ("00" + date.getMinutes().toString()).slice(-2) + ("00" + date.getSeconds().toString()).slice(-2);
    return ret;
}
function sleepfunction(date) {
    java.lang.Thread.sleep(999);
    return "success";
}
function prettytrace(session, event, localParams) {
    var log = session.log;
    var now = new Date();
    var logDate = formatDate(now);
    var logTime = formatTime(now);
    try {
        if (session["fsm-trace-level"] > 0) {
            if (event["event-additional-info"] != null) {
                session["trace-skey"] = event["event-additional-info"]["tracingid"];
                session["trace-type"] = logDate + "-" + logTime + "_" + event["event-additional-info"]["tracingmsg"];
            }
            else {
                session["trace-type"] = logDate + "-" + logTime + "_MissingStagingInfo";
            }
            if (session["trace-type"] == "random") {
                session["fsm-trace-level"] = 2;
            }
            else {
                session["fsm-trace-level"] = 2;
            }
        }
    }
    catch (e) {
        log.error("get_checkHF:Error adding trace details: {}", e);
    }
}
function saveevent(session, event, localParams) {
    session.s_savedevent = event;
    var now = new Date();
    var logDate = formatDate(now);
    var logTime = formatTime(now);
    try {
        if (session["fsm-trace-level"] > 0) {
            if (event["event-additional-info"] != null) {
                session["trace-skey"] = event["event-additional-info"]["tracingid"];
                session["trace-type"] = logDate + "-" + logTime + "_" + event["event-additional-info"]["tracingmsg"];
            }
            else {
                session["trace-type"] = logDate + "-" + logTime + "_MissingStagingInfo";
            }
            if (session["trace-type"] == "random") {
                session["fsm-trace-level"] = 2;
            }
            else {
                session["fsm-trace-level"] = 2;
            }
        }
    }
    catch (e) {
        log.error("get_checkHF:Error adding trace details: {}", e);
    }
}
//# sourceMappingURL=data:application/json;base64,