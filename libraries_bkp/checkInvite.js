"use strict";
function formatDate(date) {
    var ret = date.getFullYear().toString() + ("00" + (date.getMonth() + 1).toString()).slice(-2) + ("00" + (date.getDate()).toString()).slice(-2);
    return ret;
}
function formatTime(date) {
    var ret = ("00" + date.getHours().toString()).slice(-2) + ("00" + date.getMinutes().toString()).slice(-2) + ("00" + date.getSeconds().toString()).slice(-2);
    return ret;
}
function prettytrace(session, event, localParams) {
    var log = session.log;
    var now = new Date();
    var logDate = formatDate(now);
    var logTime = formatTime(now);
    try {
        if (session["fsm-trace-level"] > 0) {
            if (event["event-additional-info"] != null) {
                session["trace-skey"] = event["event-additional-info"]["tracingid"];
                session["trace-type"] = logDate + "-" + logTime + "_" + event["event-additional-info"]["tracingmsg"];
            }
            else {
                session["trace-type"] = logDate + "-" + logTime + "_MissingStagingInfo";
            }
            if (session["trace-type"] == "random") {
                session["fsm-trace-level"] = 2;
            }
            else {
                session["fsm-trace-level"] = 2;
            }
        }
    }
    catch (e) {
        log.error("get_checkHF:Error adding trace details: {}", e);
    }
}
;
;
function get_checkHF(session, event, localParams) {
    var ret;
    ret = ret || {};
    ret.resultCode = "success";
    var log = session.log;
    try {
        var now = new Date();
        var logDate = formatDate(now);
        var logTime = formatTime(now);
        try {
            if (session["fsm-trace-level"] > 0) {
                if (event["event-additional-info"] != null) {
                    session["trace-skey"] = event["event-additional-info"]["tracingid"];
                    session["trace-type"] = logDate + "-" + logTime + "_" + event["event-additional-info"]["tracingmsg"];
                }
                else {
                    session["trace-type"] = logDate + "-" + logTime + "_MissingStagingInfo";
                }
                if (session["trace-type"] == "random") {
                    session["fsm-trace-level"] = 2;
                }
                else {
                    session["fsm-trace-level"] = 2;
                }
            }
        }
        catch (e) {
            log.error("get_checkHF:Error adding trace details: {}", e);
        }
        session.s_InitialInvite = event;
        session.s_IncCapabilities = session.s_InitialInvite.SIP.capabilities;
        session.s_RequestURI = session.s_InitialInvite.SIP["R-URI"];
        session.s_ContextID = session.s_RequestURI.address.uri.number;
        if (session.s_InitialInvite.SIP["P-Asserted-Identity"] != null) {
            if (session.s_InitialInvite.SIP["P-Asserted-Identity"][0].address.uri.number != null) {
                session.s_pai = session.s_InitialInvite.SIP["P-Asserted-Identity"][0].address.uri.number;
            }
            else {
                if (session.s_InitialInvite.SIP["P-Asserted-Identity"][0].address.uri.user != null) {
                    session.s_pai = session.s_InitialInvite.SIP["P-Asserted-Identity"][0].address.uri.user;
                }
            }
        }
        if (session.s_InitialInvite.SIP["From"] != null) {
            if (session.s_InitialInvite.SIP["From"].address.uri.number != null) {
                session.s_from = session.s_InitialInvite.SIP["From"].address.uri.number;
            }
            else {
                if (session.s_InitialInvite.SIP["From"].address.uri.user != null) {
                    session.s_from = session.s_InitialInvite.SIP["From"].address.uri.user;
                }
            }
        }
        if (session.s_InitialInvite.SIP["Privacy"] != null) {
            if (session.s_InitialInvite.SIP["Privacy"].value != null) {
                session.s_privacy = session.s_InitialInvite.SIP["Privacy"].value;
            }
        }
        return ret;
    }
    catch (e) {
        return "Error";
    }
}
//# sourceMappingURL=data:application/json;base64,