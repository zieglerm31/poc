"use strict";
;
function overload_dispatch(event) {
    return "ocadminv5:h3irs:dropevent";
    var namespace = "ocadmin";
    namespace = dispatch(event);
    return namespace;
}
function dispatch(event) {
    var _a, _b;
    var namespace = "ocadminv5";
    try {
        if (event["header"] != null) {
            if (event["header"]["overloadedQueueList"] != null) {
                if (!(event["header"]["overloadedQueueList"][0].match(/^monitor/))) {
                    return namespace + ":h3irs:dropevent";
                }
            }
        }
    }
    catch (e) {
    }
    try {
        if (event["event-label-match"] != null && event["event-label-match"] == true) {
            namespace = "stagingv5";
        }
    }
    catch (e) {
    }
    if (event["event-type"] === "fake") {
        return namespace + ":h3irs:drop";
    }
    try {
        if (event.SIP) {
            try {
                if (event.SIP.message.method[0].match(/^OPTIONS$/) && event.SIP["R-URI"].address.uri.user != null) {
                    if (event.SIP["R-URI"].address.uri.user.match(/^h3irs_/)) {
                        if (((_a = event["event-additional-info"]) === null || _a === void 0 ? void 0 : _a["dispatcherresult"]) != null) {
                            event["event-additional-info"]["dispatcherresult"] = namespace + "_sipoption" + namespace + ":h3irs:h3irs_InternationalRoamingService_main";
                        }
                        return namespace + ":h3irs:h3irs_InternationalRoamingService_main";
                    }
                }
            }
            catch (e) {
                if (((_b = event["event-additional-info"]) === null || _b === void 0 ? void 0 : _b["dispatcherresult"]) != null) {
                    event["event-additional-info"]["dispatcherresult"] = namespace + "_exceptionoption" + namespace + ":h3irs:drop";
                }
                return namespace + ":h3irs:drop";
            }
            try {
                if (event["SIP"]["Route"][0]["address"]["uri"]["host"].match(/^irs/)) {
                    if (event["event-additional-info"] != null) {
                        event["event-additional-info"]["dispatcherresult"] = namespace + "_irs" + namespace + ":h3irs:h3irs_InternationalRoamingService_main";
                    }
                    return namespace + ":h3irs:h3irs_InternationalRoamingService_main";
                }
            }
            catch (e) {
                if (event["event-additional-info"] != null) {
                    event["event-additional-info"]["dispatcherresult"] = namespace + "_exceptionroutehf" + namespace + ":h3irs:h3irs_InternationalRoamingService_main";
                }
                return namespace + ":h3irs:drop";
            }
        }
    }
    catch (e) {
        if (event["event-additional-info"] != null) {
            event["event-additional-info"]["dispatcherresult"] = namespace + "_exceptionsip" + namespace + ":h3irs:h3irs_InternationalRoamingService_main";
        }
        return namespace + ":h3irs:drop";
    }
    try {
        if (event["event"]["camel"]) {
            try {
                if (event["event-additional-info"] != null) {
                    event["event-additional-info"]["dispatcherresult"] = namespace + "_irs" + namespace + ":h3irs:h3irs_InternationalRoamingService_main";
                }
                return namespace + ":h3irs:h3irs_InternationalRoamingService_main";
            }
            catch (e) {
                if (event["event-additional-info"] != null) {
                    event["event-additional-info"]["dispatcherresult"] = namespace + "_exceptionroutecamel" + namespace + ":h3irs:h3irs_InternationalRoamingService_main";
                }
                return namespace + ":h3irs:drop";
            }
        }
    }
    catch (e) {
        if (event["event-additional-info"] != null) {
            event["event-additional-info"]["dispatcherresult"] = namespace + "_exceptionscap" + namespace + ":h3irs:h3irs_InternationalRoamingService_main";
        }
        return namespace + ":h3irs:drop";
    }
    if (event["event-additional-info"] != null) {
        event["event-additional-info"]["dispatcherresult"] = namespace + "_default" + namespace + ":h3irs:drop";
    }
    return namespace + ":h3irs:drop";
}
//# sourceMappingURL=data:application/json;base64,