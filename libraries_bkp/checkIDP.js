"use strict";
function formatDate(date) {
    var ret = date.getFullYear().toString() + ("00" + (date.getMonth() + 1).toString()).slice(-2) + ("00" + (date.getDate()).toString()).slice(-2);
    return ret;
}
function formatTime(date) {
    var ret = ("00" + date.getHours().toString()).slice(-2) + ("00" + date.getMinutes().toString()).slice(-2) + ("00" + date.getSeconds().toString()).slice(-2);
    return ret;
}
function sleepfunction(date) {
    java.lang.Thread.sleep(999);
    return "success";
}
function prettytrace(session, event, localParams) {
    var log = session.log;
    var now = new Date();
    var logDate = formatDate(now);
    var logTime = formatTime(now);
    try {
        if (session["fsm-trace-level"] > 0) {
            if (event["event-additional-info"] != null) {
                session["trace-skey"] = event["event-additional-info"]["tracingid"];
                session["trace-type"] = logDate + "-" + logTime + "_" + event["event-additional-info"]["tracingmsg"];
            }
            else {
                session["trace-type"] = logDate + "-" + logTime + "_MissingStagingInfo";
            }
            if (session["trace-type"] == "random") {
                session["fsm-trace-level"] = 2;
            }
            else {
                session["fsm-trace-level"] = 2;
            }
        }
    }
    catch (e) {
        log.error("get_checkHF:Error adding trace details: {}", e);
    }
}
function saveevent(session, event, localParams) {
    session.s_savedevent = event;
    var now = new Date();
    var logDate = formatDate(now);
    var logTime = formatTime(now);
    try {
        if (session["fsm-trace-level"] > 0) {
            if (event["event-additional-info"] != null) {
                session["trace-skey"] = event["event-additional-info"]["tracingid"];
                session["trace-type"] = logDate + "-" + logTime + "_" + event["event-additional-info"]["tracingmsg"];
            }
            else {
                session["trace-type"] = logDate + "-" + logTime + "_MissingStagingInfo";
            }
            if (session["trace-type"] == "random") {
                session["fsm-trace-level"] = 2;
            }
            else {
                session["fsm-trace-level"] = 2;
            }
        }
    }
    catch (e) {
        log.error("get_checkHF:Error adding trace details: {}", e);
    }
}
;
;
function get_checkIDP(session, event, localParams) {
    var ret;
    var log = session.log;
    ret = ret || {};
    ret.resultCode = "Success";
    var now = new Date();
    var logDate = formatDate(now);
    var logTime = formatTime(now);
    try {
        if (session["fsm-trace-level"] > 0) {
            if (event["event-additional-info"] != null) {
                session["trace-skey"] = event["event-additional-info"]["tracingid"];
                session["trace-type"] = logDate + "-" + logTime + "_" + event["event-additional-info"]["tracingmsg"];
            }
            else {
                session["trace-type"] = logDate + "-" + logTime + "_MissingStagingInfo";
            }
            if (session["trace-type"] == "random") {
                session["fsm-trace-level"] = 2;
            }
            else {
                session["fsm-trace-level"] = 2;
            }
        }
    }
    catch (e) {
        log.error("get_checkHF:Error adding trace details: {}", e);
    }
    session.s_IDP = event;
    session.s_CalledPartyNr = session.s_IDP.event.callStart.contact.user;
    session.s_CallingPartyNr = session.s_IDP.event.callStart.leg.user;
    session.s_callReferenceNumber = session.s_IDP.event.camel.callReferenceNumber;
    session.s_callAttemptTime = session.s_IDP.event.camel.common.callAttemptTime;
    session.s_mscAddress = session.s_IDP.event.camel.mscAddress.user;
    if (session.s_IDP.event.camel.vlrAddress) {
        session.s_vlrAddress = session.s_IDP.event.camel.vlrAddress.user;
    }
    else {
        session.s_vlrAddress = session.s_mscAddress;
    }
    if (session.s_CalledPartyNr.match(/^43/)) {
        session.s_callInAustria = "Y";
    }
    var l_vlrAddress = session.s_vlrAddress;
    session.s_CC_prefix = l_vlrAddress.substr(0, 2);
    session.s_MSCRoamingDN = session.s_IDP.event.camel.sccpCgPa.user;
    if (session.s_IDP.event.camel.eventTypeBCSM == 2) {
        if (session.s_IDP.event.camel.redirectReason != null) {
            session.s_CallType = "CFMOC_IDP2";
            session.s_CCRRoleOfNode = 2;
            return ret;
        }
        else {
            session.s_CallType = "MOC_IDP2";
            session.s_CCRRoleOfNode = 0;
            return ret;
        }
    }
    else if (session.s_IDP.event.camel.eventTypeBCSM == 3) {
        if (session.s_IDP.event.camel.redirectReason != null) {
            session.s_CallType = "CFMOC_IDP3";
            session.s_CCRRoleOfNode = 2;
            return ret;
        }
        else {
            session.s_CallType = "MOC_IDP3";
            session.s_CCRRoleOfNode = 0;
            return ret;
        }
    }
    else if (session.s_IDP.event.camel.eventTypeBCSM == 12) {
        session.s_CallType = "MTC_IDP12";
        session.s_CCRRoleOfNode = 1;
        return ret;
    }
    else {
        return ret.resultCode = "No_IDP";
    }
}
//# sourceMappingURL=data:application/json;base64,