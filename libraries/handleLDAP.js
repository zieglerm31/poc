"use strict";
;
function validateLDAP_Subsc_resp(session, event, localParams) {
    var log = session.log;
    var ret = { resultCode: "Success" };
    session.s_SubscriberLDAPResp = event;
    if (session.s_SubscriberLDAPResp.body) {
        session.s_SubscriberLDAPRespBody = session.s_SubscriberLDAPResp.body;
        for (var _i = 0, _a = session.s_SubscriberLDAPRespBody; _i < _a.length; _i++) {
            var eachElement = _a[_i];
            if (eachElement != null || eachElement != undefined || eachElement != "" || eachElement != " ") {
                switch (eachElement.objectClass[0]) {
                    case "PublicID": {
                        session.s_SubPublicIDObj = eachElement;
                        break;
                    }
                    case "ServiceVOICE": {
                        if (eachElement.dn.split(",").length == 6) {
                            session.s_ServiceVOICEObj = eachElement;
                        }
                        break;
                    }
                    case "SmartSimService": {
                        session.s_SmartSimObj = eachElement;
                        session.s_SmartSimCheck = "True";
                        session.s_PssmnMain = session.s_SmartSimObj.pssmn;
                        session.s_PassnAccess = session.s_SmartSimObj.passn;
                        break;
                    }
                    case "SplitBillService": {
                        session.s_SplitBillObj = eachElement;
                        session.s_SplitBillCheck = "True";
                        break;
                    }
                }
            }
        }
        var l_vsid = session.s_ServiceVOICEObj.vsid;
        if (l_vsid) {
            if (session.ocs_Profiles[l_vsid]["homeCC"]) {
                session.s_homeCountryCode = session.ocs_Profiles[l_vsid]["homeCC"];
                session.s_prefixToConnect = session.ocs_Profiles[l_vsid]["Prefix"];
            }
            else {
                session.s_homeCountryCode = 43;
            }
        }
        else {
            if (session.ocs_Profiles["default"]["homeCC"]) {
                session.s_homeCountryCode = session.ocs_Profiles[l_vsid]["homeCC"];
            }
            else {
                session.s_homeCountryCode = 43;
            }
        }
        if (session.s_ServiceVOICEObj.vsid != null) {
            session.s_prefixToConnect = session.ocs_Profiles[l_vsid]["Prefix"];
        }
        return ret.resultCode = "Success";
    }
    else {
        return ret.resultCode = "Subscriber_LDAP_issue";
    }
}
function validate_MSCRoaming_resp(session, event, localParams) {
    var log = session.log;
    var ret = { resultCode: "Success" };
    session.s_MSCRoamingResp = event;
    try {
        if (session.s_MSCRoamingResp.body) {
            session.s_MSCRoamingRespBody = session.s_MSCRoamingResp.body;
            session.s_Norm_prefix = session.s_MSCRoamingRespBody[0].CountryCode;
            session.s_ReRoutingPrefix = session.s_MSCRoamingRespBody[0].reroutingprefix;
            session.s_volteRule1 = session.s_MSCRoamingRespBody[0].volterule1;
            session.s_volteRule2 = session.s_MSCRoamingRespBody[0].volterule2;
            return ret.resultCode = "Success";
        }
        else {
            return ret.resultCode = "MSCRoaming_LDAP_issue";
        }
    }
    catch (e) {
        return ret.resultCode = "MSCRoaming_LDAP_issue";
    }
}
function validate_SingleDB_resp(session, event, localParams) {
    var log = session.log;
    var ret = { resultCode: "Success" };
    session.s_SingleDBresp = event;
    try {
        if (session.s_SingleDBresp.body) {
            session.s_SingleDBrespBody = session.s_SingleDBresp.body;
            if ((session.s_SingleDBrespBody[0] != null) && (session.s_SingleDBrespBody[0].sdbBarringZone != null)) {
                session.s_barrzone = session.s_SingleDBrespBody[0].sdbBarringZone;
            }
            if ((session.s_SingleDBrespBody[0] != null) && (session.s_SingleDBrespBody[0].sdbBlockInRoaming != null)) {
                session.s_blockint = session.s_SingleDBrespBody[0].sdbBlockInRoaming;
            }
            if ((session.s_SingleDBrespBody[0] != null) && (session.s_SingleDBrespBody[0].sdbFps != null)) {
                session.s_sdbfps = session.s_SingleDBrespBody[0].sdbFps;
            }
            return ret.resultCode = "Success";
        }
        else {
            return ret.resultCode = "SingleDB_LDAP_issue";
        }
    }
    catch (e) {
        return ret.resultCode = "SingleDB_LDAP_issue";
    }
}
//# sourceMappingURL=data:application/json;base64,