"use strict";
;
function setdestination(session, event, localParams) {
    var viasource = event.SIP["message"]["body"][0];
    var tmp = viasource.split('Via:')[1];
    var tmp2 = tmp.split('\r\n')[0];
    tmp = tmp2.split(',').pop();
    tmp2 = tmp.split(' ').pop();
    session.source_inviteip = tmp2.split(':')[0];
    session.destination_inviteip = session.source_inviteip;
    session.destination_inviteport = "5062";
    session.destination = "sip:1000001@" + session.destination_inviteip + ":" + session.destination_inviteport;
}
function justproxy(session, event, localParams) {
    setdestination(session, event, localParams);
    session.destination = "sip:1000001@" + session.destination_inviteip + ":" + session.destination_inviteport;
}
function addheader(session, event, localParams) {
    var addHeaders = [];
    var removeHeaders = [];
    setdestination(session, event, localParams);
    session.destination = "sip:1000002@" + session.destination_inviteip + ":" + session.destination_inviteport;
    var hi = {};
    hi.header = "History-Info";
    hi.value = "sip:+11004366087962011@172.20.208.99;user=phone";
    var addHistoryInfo = [];
    addHistoryInfo.push(hi);
    addHeaders.push(addHistoryInfo[0]);
    var niceheader = {};
    niceheader.header = "MyNewHeader";
    niceheader.value = "whateveryoulike";
    addHeaders.push(niceheader);
    session.addHeaders = JSON.stringify(addHeaders);
    removeHeaders.push("Subject");
    session.removeHeaders = JSON.stringify(removeHeaders);
    session.headerrulesselect = "SipServiceSpecificRulesSet";
    return "success";
}
function b2bualeave(session, event, localParams) {
    setdestination(session, event, localParams);
    session.destination = "sip:1000006@" + session.destination_inviteip + ":" + session.destination_inviteport;
}
function setPreconditionForwadCallb2b(session, event, localParams) {
    var ret;
    ret = ret || {};
    ret.resultCode = "success";
    var events;
    events = events || {};
    events.SIPPollEvent = "null";
    events.SIP18xInformatoinalEvent = "null";
    events.SdpAnswerEvent = "null";
    events.SIPReINVITEEvent = "null";
    events.SDPOfferPollEvent = "null";
    events.SipRingingPollEvent = "null";
    events.SipSdpOfferPollEvent = "null";
    events.SIPegClosedEvent = "null";
    events.CallBeingForwardedPollEvent = "null";
    events.SIPSdpAnswerPollEvent = "null";
    events.RingingPollEvent = "null";
    events.SIP18xAnswerEvent = "null";
    events.SIPRingingPollEvent = "null";
    events.InfoPollEvent = "null";
    events.SuccessResponsePollEvent = "null";
    events.RawContentPollEvent = "test/test";
    session.events = JSON.stringify(events);
    var headerVars;
    headerVars = headerVars || {};
    headerVars.disableSendDefaultReason = "Disabled";
    headerVars.disableSendNoAnswerReason = "Disabled";
    session.headerrulevar = JSON.stringify(headerVars);
    session.headerrulesselect = "SipServiceSpecificRulesSet";
    return ret;
}
function checkSDPAnswerAction(session, event, localParams) {
    var eventData = localParams.message;
    var pollAction;
    pollAction = pollAction || {};
    pollAction.type = CallPollActionType.Reject;
    session.sendAction = JSON.stringify(pollAction);
    return true;
}
function storeInitialInvite(session, event, localParams) {
    var initialMsg = localParams.message;
    session.initial = initialMsg;
    return "stored";
}
function modifydisposition(session, event, localParams) {
    var initialMsg = localParams.message;
    if (initialMsg["SIP"]["capabilities"] != null) {
        if (initialMsg["SIP"]["capabilities"].indexOf(Capabilities.FORKING) > -1) {
            var capabilities = [];
            session.upstreamCapabilities = JSON.stringify(capabilities);
        }
    }
    if (initialMsg["SIP"]["R-URI"]["value"] == "sip:972000019@172.31.11.142:5062") {
        session.destlist = ["sip:9900004@172.31.11.142:5062", "sip:9900099@172.31.11.142:5062"];
    }
    return true;
}
function setdestinationlist(session, event, localParams) {
    var initialMsg = localParams.message;
    if (initialMsg["SIP"]["R-URI"]["value"] == "sip:972000019@172.31.11.142:5062") {
        session.destlist = ["sip:9900011@172.31.11.142:5062", "sip:9900022@172.31.11.142:5064", "sip:9900033@172.31.11.142:5065"];
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,